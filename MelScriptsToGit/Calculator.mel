global proc string Calculate(int $operation, float $input[])
{
    if ($operation == 1)
    {
        //print(floatArrayToString($input, " + ")+ " = " + Add($input));
        
        string $tempToString;
        $tempToString = Add($input);
        return $tempToString;
    }
    else if ($operation == 2)
    {
        string $tempToString;
        $tempToString = Subtract($input);
        return $tempToString;
        //print(floatArrayToString($input, " - ")+ " = " + Subtract($input));
    }
    else if ($operation == 4)
    {
        string $tempToString;
        $tempToString = Divide($input);
        return $tempToString;
        //print(floatArrayToString($input, " / ")+ " = " + Divide($input));
    }
    else if ($operation == 3)
    {
        string $tempToString;
        $tempToString = Mult($input);
        return $tempToString;
        //print(floatArrayToString($input, " * ")+ " = " + Mult($input));
    }
    else if ($operation == 5)
    {
        if (size($input)==2)
        {
            string $tempToString;
            $tempToString = Power($input);
            return $tempToString;
            //print(floatArrayToString($input, " ^ ") + " = " + Power($input));
        }
        else
        {
            print("only 2 args are allowed");
            //return null;
            return "ERROR only 2 #";
        }
    }
    else if ($operation == 6)
    {
        string $tempToString;
        $tempToString = Mean($input);
        return $tempToString;
        //print("mean of " + floatArrayToString($input, " , ")+ " is " + Mean($input));

    }
    else if ($operation == 7)
    {
        string $tempToString;
        $tempToString = Median($input);
        return $tempToString;
        //print("median of " + floatArrayToString($input, " , ") + " is " + Median($input));
    }
    else
    {
        print("valid commands are +, -, /, ^, *, mean, and median. be sure to put string it in quotes");
        return "ERROR Spaces and commas ONLY";
    }
}


global proc float Add(float $input[])
{
    float $addedVariable = $input[0];
    for ($i=0; $i<(size($input)-1); $i++)
    {
        $addedVariable += $input[$i+1];
    }
    return $addedVariable;
}
global proc float Subtract(float $input[])
{
    float $subtractedVariable = $input[0];
    for ($i=0; $i<(size($input)-1); $i++)
    {
        $subtractedVariable -= $input[$i+1];
    }
    return $subtractedVariable;
}
global proc float Divide(float $input[])
{
    float $divVariable = $input[0];
    for ($i=0; $i<(size($input)-1); $i++)
    {
        $divVariable /= $input[$i+1];
    }
    return $divVariable;
}
global proc float Mult(float $input[])
{
    float $multVariable = $input[0];
    for ($i=0; $i<(size($input)-1); $i++)
    {
        $multVariable *= $input[$i+1];
    }
    return $multVariable;
}
global proc float Power(float $input[])
{
    float $result = pow($input[0],$input[1]);
    return $result;
}
global proc float Mean(float $input[])
{
    float $meanVariable = $input[0];
    for ($i=0; $i<(size($input)-1); $i++)
    {
        $meanVariable += $input[$i+1];
    }
    float $mean = $meanVariable /= size($input);
    return $mean;
}
global proc float Median(float $input[])
{
    float $inputSort[];
    $inputSort = `sort $input`;
    if (size($inputSort)%2 == 0)
    {
        float $avgOfMedian;
        $avgOfMedian = $inputSort[(size($inputSort)/2)];
        $avgOfMedianHigh = $inputSort[((size($inputSort)-1)/2)];
        $avgOfMedianHigh += $avgOfMedian;
        float $total = $avgOfMedianHigh/2;
        return $total;
    }
    else
    {
        return $inputSort[(size($input)/2)];
    }
}

global proc CalculatorUI()
{
    string $mCalWindow = "calcWindowUI";
//makes string

if (`window -exists $mCalWindow`)
{
    deleteUI $mCalWindow;
} 
//looks for window with this string name and deletes it
$mCalWindow = `window -title "Calculator"
                      -widthHeight 100 100
                      -resizeToFitChildren 1
                      $mCalWindow`;
// creates window with name of the string variable $calwindow
string $mTopFormat = `columnLayout -adjustableColumn 1`;
optionVar -stringValue "textField" `textField -placeholderText "EnterValues"`;
//floatField "InputWindow";//
string $mFormatWrap = `gridLayout -numberOfColumns 3
                                    -numberOfRows 4
                                    -cw 40
                                    -ch 40
                                    -allowEmptyCells 0`;
button -label ("+") -command ("PrintSomethingDumb(1)");
button -label ("-") -command ("PrintSomethingDumb(2)");
button -label ("*") -command ("PrintSomethingDumb(3)");
button -label ("/") -command ("PrintSomethingDumb(4)");
button -label ("^") -command ("PrintSomethingDumb(5)");
button -label ("mean")-command ("PrintSomethingDumb(6)") -bgc .5 .5 .5;
button -label ("mode") -command ("PrintSomethingDumb(7)") -bgc .5 .5 .5;
//makes buttons
optionVar -stringValue "textFieldOutput" `textField -placeholderText "Result"  -p $mTopFormat -ed 0`;
//floatField -ed 0 -p $mTopFormat -nbg 1 "OutputWindow";//
//makes output field
showWindow;
}
global proc PrintSomethingDumb(int $operative)
{
    string $inputArray[];
    float $testFloat[];
    

    //stores the output field
        string $Result = `optionVar -q "textFieldOutput"`;
        //stores the input field
        string $tempField = `optionVar -q "textField"`;
        //queries the text in the input field
        string $tempString = `textField -q -text $tempField`;
        //changes the output field to match input field
        
        $inputArray = stringToStringArray($tempString, " ,");

    for ($i=0; $i<(size($inputArray)); $i++)
    {
        $testFloat[$i]=$inputArray[$i];
    }

    textField -e -text (Calculate($operative, $testFloat)) $Result;
}



// input numbers separated by spaces or commas
// press the operatoin you wish to use5 

////CalculatorUI
//^^^to call the ui^^^
